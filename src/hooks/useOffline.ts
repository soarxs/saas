import { useState, useEffect, useCallback } from 'react';
import { toast } from 'sonner';

interface OfflineQueueItem {
  id: string;
  type: 'sale' | 'product' | 'ingredient' | 'promotion';
  data: any;
  timestamp: number;
  retries: number;
}

interface OfflineState {
  isOnline: boolean;
  isReconnecting: boolean;
  queueLength: number;
  lastSync: Date | null;
  pendingOperations: OfflineQueueItem[];
}

export const useOffline = () => {
  const [offlineState, setOfflineState] = useState<OfflineState>({
    isOnline: navigator.onLine,
    isReconnecting: false,
    queueLength: 0,
    lastSync: null,
    pendingOperations: []
  });

  // Verificar status de conex√£o
  useEffect(() => {
    const handleOnline = () => {
      console.log('[Offline] Conex√£o restaurada');
      setOfflineState(prev => ({
        ...prev,
        isOnline: true,
        isReconnecting: false
      }));
      
      toast.success('üåê Conex√£o restaurada! Sincronizando dados...');
      
      // Sincronizar dados pendentes
      syncPendingOperations();
    };

    const handleOffline = () => {
      console.log('[Offline] Conex√£o perdida');
      setOfflineState(prev => ({
        ...prev,
        isOnline: false,
        isReconnecting: true
      }));
      
      toast.warning('üì° Modo offline ativado - suas vendas ser√£o salvas localmente');
    };

    // Registrar listeners
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    // Carregar opera√ß√µes pendentes do localStorage
    loadPendingOperations();

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // Carregar opera√ß√µes pendentes do localStorage
  const loadPendingOperations = useCallback(() => {
    try {
      const pending = localStorage.getItem('offline-queue');
      if (pending) {
        const operations = JSON.parse(pending);
        setOfflineState(prev => ({
          ...prev,
          pendingOperations: operations,
          queueLength: operations.length
        }));
      }
    } catch (error) {
      console.error('[Offline] Erro ao carregar opera√ß√µes pendentes:', error);
    }
  }, []);

  // Salvar opera√ß√µes pendentes no localStorage
  const savePendingOperations = useCallback((operations: OfflineQueueItem[]) => {
    try {
      localStorage.setItem('offline-queue', JSON.stringify(operations));
      setOfflineState(prev => ({
        ...prev,
        pendingOperations: operations,
        queueLength: operations.length
      }));
    } catch (error) {
      console.error('[Offline] Erro ao salvar opera√ß√µes pendentes:', error);
    }
  }, []);

  // Adicionar opera√ß√£o √† fila offline
  const addToOfflineQueue = useCallback((type: OfflineQueueItem['type'], data: any) => {
    const operation: OfflineQueueItem = {
      id: `${type}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      type,
      data,
      timestamp: Date.now(),
      retries: 0
    };

    setOfflineState(prev => {
      const newOperations = [...prev.pendingOperations, operation];
      savePendingOperations(newOperations);
      return {
        ...prev,
        pendingOperations: newOperations,
        queueLength: newOperations.length
      };
    });

    console.log('[Offline] Opera√ß√£o adicionada √† fila:', operation);
    
    if (!offlineState.isOnline) {
      toast.info(`üìù ${getOperationLabel(type)} salvo para sincroniza√ß√£o`);
    }
  }, [offlineState.isOnline, savePendingOperations]);

  // Sincronizar opera√ß√µes pendentes
  const syncPendingOperations = useCallback(async () => {
    if (!offlineState.isOnline || offlineState.pendingOperations.length === 0) {
      return;
    }

    console.log('[Offline] Iniciando sincroniza√ß√£o de opera√ß√µes pendentes...');
    
    setOfflineState(prev => ({ ...prev, isReconnecting: true }));

    const operations = [...offlineState.pendingOperations];
    const successfulOperations: string[] = [];
    const failedOperations: OfflineQueueItem[] = [];

    for (const operation of operations) {
      try {
        await syncOperation(operation);
        successfulOperations.push(operation.id);
        console.log('[Offline] Opera√ß√£o sincronizada:', operation.id);
      } catch (error) {
        console.error('[Offline] Erro ao sincronizar opera√ß√£o:', operation.id, error);
        
        // Incrementar tentativas
        operation.retries += 1;
        
        // Se excedeu o limite de tentativas, remover da fila
        if (operation.retries >= 3) {
          console.warn('[Offline] Opera√ß√£o removida ap√≥s 3 tentativas:', operation.id);
        } else {
          failedOperations.push(operation);
        }
      }
    }

    // Atualizar fila removendo opera√ß√µes bem-sucedidas
    const remainingOperations = failedOperations;
    savePendingOperations(remainingOperations);

    setOfflineState(prev => ({
      ...prev,
      isReconnecting: false,
      pendingOperations: remainingOperations,
      queueLength: remainingOperations.length,
      lastSync: new Date()
    }));

    if (successfulOperations.length > 0) {
      toast.success(`‚úÖ ${successfulOperations.length} opera√ß√£o(√µes) sincronizada(s)`);
    }

    if (failedOperations.length > 0) {
      toast.warning(`‚ö†Ô∏è ${failedOperations.length} opera√ß√£o(√µes) falharam na sincroniza√ß√£o`);
    }
  }, [offlineState.isOnline, offlineState.pendingOperations, savePendingOperations]);

  // Sincronizar opera√ß√£o individual
  const syncOperation = async (operation: OfflineQueueItem) => {
    // Simular sincroniza√ß√£o com servidor
    // Em uma implementa√ß√£o real, voc√™ faria chamadas HTTP aqui
    
    switch (operation.type) {
      case 'sale':
        // Simular envio de venda para servidor
        await new Promise(resolve => setTimeout(resolve, 1000));
        console.log('[Offline] Venda sincronizada:', operation.data);
        break;
        
      case 'product':
        // Simular atualiza√ß√£o de produto
        await new Promise(resolve => setTimeout(resolve, 500));
        console.log('[Offline] Produto sincronizado:', operation.data);
        break;
        
      case 'ingredient':
        // Simular atualiza√ß√£o de ingrediente
        await new Promise(resolve => setTimeout(resolve, 500));
        console.log('[Offline] Ingrediente sincronizado:', operation.data);
        break;
        
      case 'promotion':
        // Simular atualiza√ß√£o de promo√ß√£o
        await new Promise(resolve => setTimeout(resolve, 500));
        console.log('[Offline] Promo√ß√£o sincronizada:', operation.data);
        break;
        
      default:
        throw new Error(`Tipo de opera√ß√£o n√£o suportado: ${operation.type}`);
    }
  };

  // Limpar fila offline
  const clearOfflineQueue = useCallback(() => {
    savePendingOperations([]);
    toast.success('üóëÔ∏è Fila offline limpa');
  }, [savePendingOperations]);

  // Executar opera√ß√£o (online ou offline)
  const executeOperation = useCallback(async (
    type: OfflineQueueItem['type'],
    data: any,
    onlineCallback?: () => Promise<void>
  ) => {
    if (offlineState.isOnline && onlineCallback) {
      try {
        await onlineCallback();
        console.log('[Offline] Opera√ß√£o executada online:', type);
      } catch (error) {
        console.error('[Offline] Erro na opera√ß√£o online, adicionando √† fila:', error);
        addToOfflineQueue(type, data);
      }
    } else {
      addToOfflineQueue(type, data);
    }
  }, [offlineState.isOnline, addToOfflineQueue]);

  // Obter label da opera√ß√£o
  const getOperationLabel = (type: OfflineQueueItem['type']) => {
    switch (type) {
      case 'sale': return 'Venda';
      case 'product': return 'Produto';
      case 'ingredient': return 'Ingrediente';
      case 'promotion': return 'Promo√ß√£o';
      default: return 'Opera√ß√£o';
    }
  };

  // For√ßar sincroniza√ß√£o
  const forceSync = useCallback(() => {
    if (offlineState.isOnline) {
      syncPendingOperations();
    } else {
      toast.error('‚ùå Sem conex√£o com a internet');
    }
  }, [offlineState.isOnline, syncPendingOperations]);

  return {
    ...offlineState,
    addToOfflineQueue,
    syncPendingOperations,
    clearOfflineQueue,
    executeOperation,
    forceSync,
    getOperationLabel
  };
};





